openapi: 3.0.3
info:
  title: DailyHub User API
  version: 1.0.0
servers:
  - url: /
  - url: /api-user
paths:
  /api/auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
      responses:
        '201': { description: Created }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: OK }
  /api/discounts:
    get:
      summary: List discounts
      parameters:
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
        - in: query
          name: minDiscount
          schema: { type: integer }
        - in: query
          name: maxDiscount
          schema: { type: integer }
        - in: query
          name: minPrice
          schema: { type: number }
        - in: query
          name: maxPrice
          schema: { type: number }
        - in: query
          name: expiresSoon
          schema: { type: boolean }
        - in: query
          name: isUrgent
          schema: { type: boolean }
        - in: query
          name: lat
          schema: { type: number }
        - in: query
          name: lng
          schema: { type: number }
        - in: query
          name: radius
          schema: { type: number }
      responses:
        '200': { description: OK }

  /api/discounts/{id}:
    get:
      summary: Get discount detail
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/discounts/{id}/view:
    post:
      summary: Track discount view
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/stores:
    get:
      summary: List stores
      parameters:
        - in: query
          name: lat
          schema: { type: number }
        - in: query
          name: lng
          schema: { type: number }
        - in: query
          name: radius
          schema: { type: number }
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200': { description: OK }

  /api/search:
    get:
      summary: Search discounts and stores
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: type
          schema:
            type: string
            enum: [discounts, stores, all]
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: lat
          schema: { type: number }
        - in: query
          name: lng
          schema: { type: number }
        - in: query
          name: radius
          schema: { type: number }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200': { description: OK }

  /api/categories:
    get:
      summary: List categories (flat)
      parameters:
        - in: query
          name: parent_id
          schema: { type: integer, nullable: true }
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: offset
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/categories/roots:
    get:
      summary: List root categories (parent_id is null)
      responses:
        '200': { description: OK }

  /api/categories/tree:
    get:
      summary: List categories as a tree (roots with children)
      responses:
        '200': { description: OK }

  /api/discounts/{id}/comments:
    get:
      summary: List comments
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      summary: Add comment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text: { type: string }
                rating: { type: integer, minimum: 1, maximum: 5 }
      responses:
        '201': { description: Created }

  /api/health:
    get:
      summary: Health check
      responses:
        '200': { description: OK }

  /api/auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: { type: string }
      responses:
        '200': { description: OK }

  /api/users/me:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }
    patch:
      summary: Update current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                photo_url: { type: string }
      responses:
        '200': { description: OK }

  /api/users/me/location:
    post:
      summary: Update user location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat: { type: number }
                lng: { type: number }
                address: { type: string }
      responses:
        '200': { description: OK }

  /api/users/{id}/achievements:
    get:
      summary: List user achievements
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/stores/{id}:
    get:
      summary: Get store detail
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/discounts/{id}/favorite:
    post:
      summary: Save discount to favorites
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
    delete:
      summary: Remove discount from favorites
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/users/me/favorites:
    get:
      summary: List my favorites
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200': { description: OK }

  /api/actions/perform:
    post:
      summary: Perform action (gamification)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string }
                targetId: { type: integer }
      responses:
        '200': { description: OK }

  /api/users/me/points-history:
    get:
      summary: My points history
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200': { description: OK }

  /api/users/me/badges:
    get:
      summary: My badges
      security:
        - bearerAuth: []
      responses:
        '200': { description: OK }

  /api/notifications:
    get:
      summary: Get user notifications
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200': { description: OK }

  /api/gamification/spin-wheel:
    post:
      summary: Spin the wheel
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reward: { type: string }
                  points: { type: integer }
                  discount: { type: string }

  /api/leaderboard:
    get:
      summary: Leaderboard
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [weekly, monthly]
      responses:
        '200': { description: OK }

  /api/challenges/active:
    get:
      summary: Active challenges
      responses:
        '200': { description: OK }

  /api/challenges/{id}/complete:
    post:
      summary: Complete challenge
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /api/chat:
    post:
      summary: Chat with AI assistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message: { type: string }
                sessionKey: { type: string, description: Reuse to persist conversation }
                history:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: [user, assistant]
                      content: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply: { type: string }
                  model: { type: string }
                  usage: { type: object }
                  sessionKey: { type: string }
        '422': { description: Validation error }
        '500': { description: Server error }

  /api/chat/sessions:
    post:
      summary: Create chat session
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer }
                  sessionKey: { type: string }
    get:
      summary: List my chat sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        session_key: { type: string }
                        title: { type: string }
                        created_at: { type: string }
                        last_activity_at: { type: string }

  /api/chat/sessions/{sessionKey}/messages:
    get:
      summary: List messages in a session
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sessionKey
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        role: { type: string }
                        content: { type: string }
                        created_at: { type: string }

  /api/chat/sessions/{sessionKey}:
    delete:
      summary: Delete chat session
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: sessionKey
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

